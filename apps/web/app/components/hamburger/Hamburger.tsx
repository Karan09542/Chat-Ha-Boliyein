"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { usePathname, useSearchParams } from "next/navigation";

import { cn } from "../../../utils/utils";
import Tippy from "@tippyjs/react";
import "tippy.js/dist/tippy.css";
import InputField from "../input/InputField";
import { toast } from "react-toastify";
import { IoMdCheckmark } from "react-icons/io";
import { RxCrossCircled } from "react-icons/rx";
import { IoIosAdd } from "react-icons/io";
import { BsClipboard2Check } from "react-icons/bs";
import { getSocket } from "../../../utils/socket";
import { Socket } from "socket.io-client";
import Switch from "../button/switch/Switch";
import { handleCopy } from "../../../utils/utils";
import { useJoinRequestToRoom } from "@store/index";
import { FaExclamation } from "react-icons/fa";

interface HamburgerProps {
  img?: string;
  className?: string;
}

const handleProfileData = (key: string, value: string) => {
  localStorage.setItem(key, value);
};

// const countryEmojis = {
//   AD: "ðŸ‡¦ðŸ‡©",
//   AE: "ðŸ‡¦ðŸ‡ª",
//   AF: "ðŸ‡¦ðŸ‡«",
//   AG: "ðŸ‡¦ðŸ‡¬",
//   AI: "ðŸ‡¦ðŸ‡®",
//   AL: "ðŸ‡¦ðŸ‡±",
//   AM: "ðŸ‡¦ðŸ‡²",
//   AO: "ðŸ‡¦ðŸ‡´",
//   AQ: "ðŸ‡¦ðŸ‡¶",
//   AR: "ðŸ‡¦ðŸ‡·",
//   AS: "ðŸ‡¦ðŸ‡¸",
//   AT: "ðŸ‡¦ðŸ‡¹",
//   AU: "ðŸ‡¦ðŸ‡º",
//   AW: "ðŸ‡¦ðŸ‡¼",
//   AX: "ðŸ‡¦ðŸ‡½",
//   AZ: "ðŸ‡¦ðŸ‡¿",
//   BA: "ðŸ‡§ðŸ‡¦",
//   BB: "ðŸ‡§ðŸ‡§",
//   BD: "ðŸ‡§ðŸ‡©",
//   BE: "ðŸ‡§ðŸ‡ª",
//   BF: "ðŸ‡§ðŸ‡«",
//   BG: "ðŸ‡§ðŸ‡¬",
//   BH: "ðŸ‡§ðŸ‡­",
//   BI: "ðŸ‡§ðŸ‡®",
//   BJ: "ðŸ‡§ðŸ‡¯",
//   BL: "ðŸ‡§ðŸ‡±",
//   BM: "ðŸ‡§ðŸ‡²",
//   BN: "ðŸ‡§ðŸ‡³",
//   BO: "ðŸ‡§ðŸ‡´",
//   BQ: "ðŸ‡§ðŸ‡¶",
//   BR: "ðŸ‡§ðŸ‡·",
//   BS: "ðŸ‡§ðŸ‡¸",
//   BT: "ðŸ‡§ðŸ‡¹",
//   BV: "ðŸ‡§ðŸ‡»",
//   BW: "ðŸ‡§ðŸ‡¼",
//   BY: "ðŸ‡§ðŸ‡¾",
//   BZ: "ðŸ‡§ðŸ‡¿",
//   CA: "ðŸ‡¨ðŸ‡¦",
//   CC: "ðŸ‡¨ðŸ‡¨",
//   CD: "ðŸ‡¨ðŸ‡©",
//   CF: "ðŸ‡¨ðŸ‡«",
//   CG: "ðŸ‡¨ðŸ‡¬",
//   CH: "ðŸ‡¨ðŸ‡­",
//   CI: "ðŸ‡¨ðŸ‡®",
//   CK: "ðŸ‡¨ðŸ‡°",
//   CL: "ðŸ‡¨ðŸ‡±",
//   CM: "ðŸ‡¨ðŸ‡²",
//   CN: "ðŸ‡¨ðŸ‡³",
//   CO: "ðŸ‡¨ðŸ‡´",
//   CR: "ðŸ‡¨ðŸ‡·",
//   CU: "ðŸ‡¨ðŸ‡º",
//   CV: "ðŸ‡¨ðŸ‡»",
//   CW: "ðŸ‡¨ðŸ‡¼",
//   CX: "ðŸ‡¨ðŸ‡½",
//   CY: "ðŸ‡¨ðŸ‡¾",
//   CZ: "ðŸ‡¨ðŸ‡¿",
//   DE: "ðŸ‡©ðŸ‡ª",
//   DJ: "ðŸ‡©ðŸ‡¯",
//   DK: "ðŸ‡©ðŸ‡°",
//   DM: "ðŸ‡©ðŸ‡²",
//   DO: "ðŸ‡©ðŸ‡´",
//   DZ: "ðŸ‡©ðŸ‡¿",
//   EC: "ðŸ‡ªðŸ‡¨",
//   EE: "ðŸ‡ªðŸ‡ª",
//   EG: "ðŸ‡ªðŸ‡¬",
//   EH: "ðŸ‡ªðŸ‡­",
//   ER: "ðŸ‡ªðŸ‡·",
//   ES: "ðŸ‡ªðŸ‡¸",
//   ET: "ðŸ‡ªðŸ‡¹",
//   FI: "ðŸ‡«ðŸ‡®",
//   FJ: "ðŸ‡«ðŸ‡¯",
//   FK: "ðŸ‡«ðŸ‡°",
//   FM: "ðŸ‡«ðŸ‡²",
//   FO: "ðŸ‡«ðŸ‡´",
//   FR: "ðŸ‡«ðŸ‡·",
//   GA: "ðŸ‡¬ðŸ‡¦",
//   GB: "ðŸ‡¬ðŸ‡§",
//   GD: "ðŸ‡¬ðŸ‡©",
//   GE: "ðŸ‡¬ðŸ‡ª",
//   GF: "ðŸ‡¬ðŸ‡«",
//   GG: "ðŸ‡¬ðŸ‡¬",
//   GH: "ðŸ‡¬ðŸ‡­",
//   GI: "ðŸ‡¬ðŸ‡®",
//   GL: "ðŸ‡¬ðŸ‡±",
//   GM: "ðŸ‡¬ðŸ‡²",
//   GN: "ðŸ‡¬ðŸ‡³",
//   GP: "ðŸ‡¬ðŸ‡µ",
//   GQ: "ðŸ‡¬ðŸ‡¶",
//   GR: "ðŸ‡¬ðŸ‡·",
//   GS: "ðŸ‡¬ðŸ‡¸",
//   GT: "ðŸ‡¬ðŸ‡¹",
//   GU: "ðŸ‡¬ðŸ‡º",
//   GW: "ðŸ‡¬ðŸ‡¼",
//   GY: "ðŸ‡¬ðŸ‡¾",
//   HK: "ðŸ‡­ðŸ‡°",
//   HM: "ðŸ‡­ðŸ‡²",
//   HN: "ðŸ‡­ðŸ‡³",
//   HR: "ðŸ‡­ðŸ‡·",
//   HT: "ðŸ‡­ðŸ‡¹",
//   HU: "ðŸ‡­ðŸ‡º",
//   ID: "ðŸ‡®ðŸ‡©",
//   IE: "ðŸ‡®ðŸ‡ª",
//   IL: "ðŸ‡®ðŸ‡±",
//   IM: "ðŸ‡®ðŸ‡²",
//   IN: "ðŸ‡®ðŸ‡³",
//   IO: "ðŸ‡®ðŸ‡´",
//   IQ: "ðŸ‡®ðŸ‡¶",
//   IR: "ðŸ‡®ðŸ‡·",
//   IS: "ðŸ‡®ðŸ‡¸",
//   IT: "ðŸ‡®ðŸ‡¹",
//   JE: "ðŸ‡¯ðŸ‡ª",
//   JM: "ðŸ‡¯ðŸ‡²",
//   JO: "ðŸ‡¯ðŸ‡´",
//   JP: "ðŸ‡¯ðŸ‡µ",
//   KE: "ðŸ‡°ðŸ‡ª",
//   KG: "ðŸ‡°ðŸ‡¬",
//   KH: "ðŸ‡°ðŸ‡­",
//   KI: "ðŸ‡°ðŸ‡®",
//   KM: "ðŸ‡°ðŸ‡²",
//   KN: "ðŸ‡°ðŸ‡³",
//   KP: "ðŸ‡°ðŸ‡µ",
//   KR: "ðŸ‡°ðŸ‡·",
//   KW: "ðŸ‡°ðŸ‡¼",
//   KY: "ðŸ‡°ðŸ‡¾",
//   KZ: "ðŸ‡°ðŸ‡¿",
//   LA: "ðŸ‡±ðŸ‡¦",
//   LB: "ðŸ‡±ðŸ‡§",
//   LC: "ðŸ‡±ðŸ‡¨",
//   LI: "ðŸ‡±ðŸ‡®",
//   LK: "ðŸ‡±ðŸ‡°",
//   LR: "ðŸ‡±ðŸ‡·",
//   LS: "ðŸ‡±ðŸ‡¸",
//   LT: "ðŸ‡±ðŸ‡¹",
//   LU: "ðŸ‡±ðŸ‡º",
//   LV: "ðŸ‡±ðŸ‡»",
//   LY: "ðŸ‡±ðŸ‡¾",
//   MA: "ðŸ‡²ðŸ‡¦",
//   MC: "ðŸ‡²ðŸ‡¨",
//   MD: "ðŸ‡²ðŸ‡©",
//   ME: "ðŸ‡²ðŸ‡ª",
//   MF: "ðŸ‡²ðŸ‡«",
//   MG: "ðŸ‡²ðŸ‡¬",
//   MH: "ðŸ‡²ðŸ‡­",
//   MK: "ðŸ‡²ðŸ‡°",
//   ML: "ðŸ‡²ðŸ‡±",
//   MM: "ðŸ‡²ðŸ‡²",
//   MN: "ðŸ‡²ðŸ‡³",
//   MO: "ðŸ‡²ðŸ‡´",
//   MP: "ðŸ‡²ðŸ‡µ",
//   MQ: "ðŸ‡²ðŸ‡¶",
//   MR: "ðŸ‡²ðŸ‡·",
//   MS: "ðŸ‡²ðŸ‡¸",
//   MT: "ðŸ‡²ðŸ‡¹",
//   MU: "ðŸ‡²ðŸ‡º",
//   MV: "ðŸ‡²ðŸ‡»",
//   MW: "ðŸ‡²ðŸ‡¼",
//   MX: "ðŸ‡²ðŸ‡½",
//   MY: "ðŸ‡²ðŸ‡¾",
//   MZ: "ðŸ‡²ðŸ‡¿",
//   NA: "ðŸ‡³ðŸ‡¦",
//   NC: "ðŸ‡³ðŸ‡¨",
//   NE: "ðŸ‡³ðŸ‡ª",
//   NF: "ðŸ‡³ðŸ‡«",
//   NG: "ðŸ‡³ðŸ‡¬",
//   NI: "ðŸ‡³ðŸ‡®",
//   NL: "ðŸ‡³ðŸ‡±",
//   NO: "ðŸ‡³ðŸ‡´",
//   NP: "ðŸ‡³ðŸ‡µ",
//   NR: "ðŸ‡³ðŸ‡·",
//   NU: "ðŸ‡³ðŸ‡º",
//   NZ: "ðŸ‡³ðŸ‡¿",
//   OM: "ðŸ‡´ðŸ‡²",
//   PA: "ðŸ‡µðŸ‡¦",
//   PE: "ðŸ‡µðŸ‡ª",
//   PF: "ðŸ‡µðŸ‡«",
//   PG: "ðŸ‡µðŸ‡¬",
//   PH: "ðŸ‡µðŸ‡­",
//   PK: "ðŸ‡µðŸ‡°",
//   PL: "ðŸ‡µðŸ‡±",
//   PM: "ðŸ‡µðŸ‡²",
//   PN: "ðŸ‡µðŸ‡³",
//   PR: "ðŸ‡µðŸ‡·",
//   PS: "ðŸ‡µðŸ‡¸",
//   PT: "ðŸ‡µðŸ‡¹",
//   PW: "ðŸ‡µðŸ‡¼",
//   PY: "ðŸ‡µðŸ‡¾",
//   QA: "ðŸ‡¶ðŸ‡¦",
//   RE: "ðŸ‡·ðŸ‡ª",
//   RO: "ðŸ‡·ðŸ‡´",
//   RS: "ðŸ‡·ðŸ‡¸",
//   RU: "ðŸ‡·ðŸ‡º",
//   RW: "ðŸ‡·ðŸ‡¼",
//   SA: "ðŸ‡¸ðŸ‡¦",
//   SB: "ðŸ‡¸ðŸ‡§",
//   SC: "ðŸ‡¸ðŸ‡¨",
//   SD: "ðŸ‡¸ðŸ‡©",
//   SE: "ðŸ‡¸ðŸ‡ª",
//   SG: "ðŸ‡¸ðŸ‡¬",
//   SH: "ðŸ‡¸ðŸ‡­",
//   SI: "ðŸ‡¸ðŸ‡®",
//   SJ: "ðŸ‡¸ðŸ‡¯",
//   SK: "ðŸ‡¸ðŸ‡°",
//   SL: "ðŸ‡¸ðŸ‡±",
//   SM: "ðŸ‡¸ðŸ‡²",
//   SN: "ðŸ‡¸ðŸ‡³",
//   SO: "ðŸ‡¸ðŸ‡´",
//   SR: "ðŸ‡¸ðŸ‡·",
//   SS: "ðŸ‡¸ðŸ‡¸",
//   ST: "ðŸ‡¸ðŸ‡¹",
//   SV: "ðŸ‡¸ðŸ‡»",
//   SX: "ðŸ‡¸ðŸ‡½",
//   SY: "ðŸ‡¸ðŸ‡¾",
//   SZ: "ðŸ‡¸ðŸ‡¿",
//   TC: "ðŸ‡¹ðŸ‡¨",
//   TD: "ðŸ‡¹ðŸ‡©",
//   TF: "ðŸ‡¹ðŸ‡«",
//   TG: "ðŸ‡¹ðŸ‡¬",
//   TH: "ðŸ‡¹ðŸ‡­",
//   TJ: "ðŸ‡¹ðŸ‡¯",
//   TK: "ðŸ‡¹ðŸ‡°",
//   TL: "ðŸ‡¹ðŸ‡±",
//   TM: "ðŸ‡¹ðŸ‡²",
//   TN: "ðŸ‡¹ðŸ‡³",
//   TO: "ðŸ‡¹ðŸ‡´",
//   TR: "ðŸ‡¹ðŸ‡·",
//   TT: "ðŸ‡¹ðŸ‡¹",
//   TV: "ðŸ‡¹ðŸ‡»",
//   TW: "ðŸ‡¹ðŸ‡¼",
//   TZ: "ðŸ‡¹ðŸ‡¿",
//   UA: "ðŸ‡ºðŸ‡¦",
//   UG: "ðŸ‡ºðŸ‡¬",
//   UM: "ðŸ‡ºðŸ‡²",
//   US: "ðŸ‡ºðŸ‡¸",
//   UY: "ðŸ‡ºðŸ‡¾",
//   UZ: "ðŸ‡ºðŸ‡¿",
//   VA: "ðŸ‡»ðŸ‡¦",
//   VC: "ðŸ‡»ðŸ‡¨",
//   VE: "ðŸ‡»ðŸ‡ª",
//   VG: "ðŸ‡»ðŸ‡¬",
//   VI: "ðŸ‡»ðŸ‡®",
//   VN: "ðŸ‡»ðŸ‡³",
//   VU: "ðŸ‡»ðŸ‡º",
//   WF: "ðŸ‡¼ðŸ‡«",
//   WS: "ðŸ‡¼ðŸ‡¸",
//   YE: "ðŸ‡¾ðŸ‡ª",
//   YT: "ðŸ‡¾ðŸ‡¹",
//   ZA: "ðŸ‡¿ðŸ‡¦",
//   ZM: "ðŸ‡¿ðŸ‡²",
//   ZW: "ðŸ‡¿ðŸ‡¼",
// };

const socket = getSocket();

const createRoom = ({
  socket,
  customeRoomName,
  setCustomeRoomName,
}: {
  socket: Socket;
  customeRoomName: string;
  setCustomeRoomName: (customeRoomName: string) => void;
}) => {
  if (!socket) return;
  if (customeRoomName) {
    const customeRoomNameTrimmed = customeRoomName.trim();
    socket.emit("create-room", customeRoomNameTrimmed, localStorage.getItem("username"));
    setCustomeRoomName("");
  } else {
    socket.emit("create-room", "", localStorage.getItem("username"));
  }
};

const Rooms = ({ rooms, setRooms, socket }: any) => {


  const searchParams = useSearchParams();
  const roomId = searchParams.get("id")?.trim();
  const [joinTo, setJoinTo] = useState<string>("");
  const [isCustomeRoomName, setIsCustomeRoomName] = useState<boolean>(false);
  const [customeRoomName, setCustomeRoomName] = useState<string>("");
  const [admin, setAdmin] = useState<{ name?: string, country: string, isGoneFrom:Record<string, boolean> }>({ name: "", country: "", isGoneFrom: {} });
  const setIsSendJoinRequest = useJoinRequestToRoom(state => state.setIsSendJoinRequest)



  async function handleRoomAdmin(username: string) {
    if (username) {
      setAdmin(prev => ({ ...prev, name: username }))
    } else {
      setAdmin(prev => ({ ...prev, name: "Unknown" }))
    }
  }
  const handleRoomNotExists = async (message: string) => {
    setIsSendJoinRequest(false)
    toast(message);
  };
  const handleRoomExist = async () => {
    setIsSendJoinRequest(true)
  }
  const handleAdminGone = async ({roomId}:{roomId:string}) => {
    if(!roomId) return
    const trimmedRoomId = roomId.trim();
    setAdmin(prev => ({ ...prev, isGoneFrom: { ...prev.isGoneFrom, [trimmedRoomId]: true } }))
  }
  useEffect(() => {
    if (!socket) return;
    if (roomId) {
      socket.off("room-admin", handleRoomAdmin)
    }
    socket.off("room-exist", handleRoomExist);
    socket.off("room-not-exist", handleRoomNotExists);
    socket.off("admin-gone", handleAdminGone)


    if (!socket.connected) {
      socket.connect()
    }

    if (roomId) {
      setTimeout(() => {
        socket.emit("get-room-admin", roomId)
      }, 1000);
      socket.on("room-admin", handleRoomAdmin)
    }

    socket.on("room-exist", handleRoomExist);
    socket.on("room-not-exist", handleRoomNotExists);
    socket.on("admin-gone", handleAdminGone)

    return () => {
      socket.off("room-admin", handleRoomAdmin)
      socket.off("room-exist", handleRoomExist);
      socket.off("room-not-exist", handleRoomNotExists);
      socket.off("admin-gone", handleAdminGone)
    }
  }, [roomId])

  return (
    <div>
      <h3 className="text-2xl flex items-center justify-between">
        Rooms
        <Switch
          label="custome"
          size="small"
          checked={isCustomeRoomName}
          onChange={setIsCustomeRoomName}
        />
      </h3>

      {roomId ? (
        <div
          onClick={() => handleCopy({ text: roomId })}
          className="bg-gray-200 dark:bg-gray-700 py-2 px-3 rounded cursor-pointer w-fit hover:bg-gray-300 dark:hover:bg-gray-600 transition"
        >
          <p className="text-sm font-mono text-blue-600 dark:text-blue-400">
            Room ID: <span className="font-semibold">{roomId}</span>
          </p>
          <p className="text-xs text-gray-700 dark:text-gray-300">
            Admin: {admin.name ? (
              <span className="font-medium">{admin.name}</span>
            ) : (
              <span className="italic">Unknown</span>
            )}{" "}
            {admin.country && <span className="ml-1">({admin.country})</span>}
            {admin.isGoneFrom[roomId] && 
            <span className="ml-1 text-red-500 flex text-xs items-center">(gone)<FaExclamation size={9} /></span>
            }
          </p>
        </div>

      ) : (
        <div className="py-1">
          {rooms.map((item: any, index: number) => (
            <div
              key={item.roomId || "ram"}
              className="flex items-center justify-between mb-0.5 divide-y-1 divide-red-500"
            >
              <Tippy content="Enter">
                <Link
                  href={`/room?id=${item.roomId}`}
                  className="text-[0.95rem] py-1 pr-3 hover:bg-gray-100 dark:hover:bg-red-500 cursor-pointer active:scale-95 transition-all max-w-[150px] w-full truncate select-none"
                >
                  {item.roomId}
                </Link>
              </Tippy>

              <div className="flex items-center gap-x-0.5 [&>svg]:active:scale-95 [&>svg]:transition-all">
                <BsClipboard2Check
                  className="cursor-pointer"
                  onClick={() => {
                    handleCopy({ text: item.roomId });
                  }}
                  size={18}
                />
                <RxCrossCircled
                  size={18}
                  onClick={() => {
                    setRooms(rooms.filter((_: any, i: number) => i !== index));
                    socket.emit("leave-room", item.roomId);
                  }}
                  className="cursor-pointer text-red-500"
                />
              </div>
            </div>
          ))}

          {isCustomeRoomName && (
            <InputField
              className="p-1 box-border rounded border border-blue-500 w-fit"
              type="text"
              name="Custome Room Name"
              placeholder="Custome Room Name"
              value={customeRoomName}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                setCustomeRoomName(e.target.value);
              }}
            />
          )}

          <IoIosAdd
            size={16}
            onClick={() => {
              if (isCustomeRoomName && !/\S/.test(customeRoomName)) {
                toast.error("Room name should not empty or space");
                return;
              }
              createRoom({ socket, customeRoomName, setCustomeRoomName });
            }}
            className="cursor-pointer text-white bg-green-500 rounded mt-2 active:scale-95 transition-all"
          />
        </div>
      )}
      <>
        <div className="flex items-center justify-between gap-x-2 mt-2">
          <InputField
            className="p-1 box-border rounded border border-blue-500"
            type="text"
            name="joinTo"
            placeholder="Join To"

            value={joinTo}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
              setJoinTo(e.target.value);
            }}
            onFocus={(e) => e.target.select()}
          />
          <button
            onClick={() => {
              if (!/\S/.test(joinTo)) {
                toast.error("Room name should not empty or space");
                return;
              }
              const trimmedJoinTo = joinTo.trim();
              socket.emit("request-join-room", { roomId: trimmedJoinTo, username: localStorage.getItem("username") });
            }
            }

            className={
              "bg-blue-500 px-2 py-0.5 rounded text-white active:scale-95 transition-all cursor-pointer select-none"
            }
          >
            join
          </button>
        </div>
      </>
    </div>
  );
};

const ProfileContent = ({ data }: any) => {
  return (
    <div className="max-h-[70vh] overflow-y-auto">

      {data?.map((item: any, index: number) => (
        <div
          key={item?.label || item?.name}
          className="[&>:not(hr)]:px-4 [&>:not(hr)]:py-3 "
        >
          <>
            {item?.type ? (
              <InputField {...item} className="relative  [&>input]:py-2">
                <div
                  onClick={() => {
                    toast.success(`Updated ${item?.name}`);
                    handleProfileData(item?.name, item?.value);
                  }}
                  role={"button"}
                  aria-label="Save changes"
                  className="absolute top-1/2 -translate-y-1/2 right-1 dark:bg-white bg-black rounded p-[0.08rem] cursor-pointer active:scale-95"
                >
                  <IoMdCheckmark className="text-green-500" size={20} />
                </div>
              </InputField>
            ) : (
              <>
                {item?.label === "Rooms" ? (
                  <Rooms
                    rooms={item?.rooms}
                    setRooms={item?.setRooms}
                    socket={item?.socket}
                  />
                ) : (
                  <div>{item?.label}</div>
                )}
              </>
            )}
            {index !== data.length - 1 && <hr className="dark:text-red-500" />}
          </>
        </div>
      ))}
    </div>
  );
};

const Hamburger: React.FC<HamburgerProps> = ({ className }) => {
  if (typeof window === "undefined") return;

  const [inputValue, setInputValue] = React.useState<{
    imageURL: string;
    username: string;
  }>({
    imageURL: "",
    username: "",
  });

  React.useEffect(() => {
    setInputValue({
      imageURL: localStorage.getItem("image") || "",
      username: localStorage.getItem("username") || "",
    });
  }, []);

  type Room = {
    roomId: string;
  };

  const [rooms, setRooms] = React.useState<Room[]>([]);

  const handleRoomAlreadyExist = async (message: string) => {
    toast.error(message);
  };
  const handleRoomCreated = (roomId: string) => {
    setRooms((prev) => [...(prev || []), { roomId }]);
  };
  React.useEffect(() => {
    if (!socket) return;
    socket.off("room-created", handleRoomCreated);
    socket.off("room-already-exist", handleRoomAlreadyExist);

    if (!socket.connected) {
      socket.connect()
    }
    socket.on("room-created", handleRoomCreated);
    socket.on("room-already-exist", handleRoomAlreadyExist);

    return () => {
      socket.off("room-created", handleRoomCreated);
      socket.off("room-already-exist", handleRoomAlreadyExist);
    };
  }, []);

  const profileData = [
    {
      label: "Profile",
    },
    {
      label: "Logout",
    },
    {
      label: "Settings",
    },
    {
      label: "Rooms",
      rooms,
      setRooms,
      socket,
    },
    {
      type: "text",
      name: "image",
      value: inputValue?.imageURL,
      onChange: (e: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue({ ...inputValue, imageURL: e.target.value });
      },
      placeholder: "image url",
    },
    {
      type: "text",
      name: "username",
      value: inputValue?.username,
      onChange: (e: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue({ ...inputValue, username: e.target.value });
      },
      placeholder: "username",
    },
  ];

  return (
    <div className={cn("", className)}>
      <Tippy
        className={`!text-black [&>:first-child]:!p-0 min-w-[15.625rem] dark:!text-white dark:[&>:first-child]:bg-black [&>:first-child]:rounded-lg [&>:first-child]:bg-white [&>div:nth-child(2)]:!text-white dark:[&>div:nth-child(2)]:!text-black `}
        content={<ProfileContent data={profileData} />}
        interactive={true}
        arrow={true}
        placement="bottom"
        delay={[0, 100000]}
      >
        <img
          src={
            inputValue?.imageURL ||
            "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT9mRfU9kUiPo1BU6vrPP97OExV1G_kgrUv5A&s"
          }
          alt="user image"
          aria-label="Open user menu"
          className={`max-w-7 max-h-7 min-w-7 min-h-7 rounded-full object-cover object-center cursor-pointer`}
        />
      </Tippy>
    </div>
  );
};

export default Hamburger;
